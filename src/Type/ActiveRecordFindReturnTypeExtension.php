<?php
declare(strict_types=1);

namespace ErickSkrauch\PHPStan\Yii2\Type;

use PhpParser\Node\Expr\StaticCall;
use PhpParser\Node\Name;
use PHPStan\Analyser\Scope;
use PHPStan\Reflection\MethodReflection;
use PHPStan\Reflection\ParametersAcceptorSelector;
use PHPStan\Type\DynamicStaticMethodReturnTypeExtension;
use PHPStan\Type\Type;
use yii\db\ActiveRecordInterface;

/**
 * This extension extends the standard return type generated by PHPStan to the ActiveRecord::find(),
 * so that we can further remember which model we are dealing with
 */
final class ActiveRecordFindReturnTypeExtension implements DynamicStaticMethodReturnTypeExtension {

    public function getClass(): string {
        return ActiveRecordInterface::class;
    }

    public function isStaticMethodSupported(MethodReflection $methodReflection): bool {
        return $methodReflection->getName() === 'find';
    }

    public function getTypeFromStaticMethodCall(MethodReflection $methodReflection, StaticCall $methodCall, Scope $scope): ?Type {
        $class = $methodCall->class;
        if (!$class instanceof Name) {
            return null;
        }

        $name = $scope->resolveName($class);
        /** @var \PHPStan\Type\ObjectType $returnType */
        $returnType = ParametersAcceptorSelector::selectSingle($methodReflection->getVariants())->getReturnType();

        return new ActiveQueryObjectType($name, $returnType->getClassName());
    }

}
